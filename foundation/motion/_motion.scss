/* Mixin - Transition */
$transition-duration-base: 0.3s;
$transition-timing-function-base: ease-in-out;

@mixin transition(
  $transition-property: all,
  $transition-duration: $transition-duration-base,
  $transition-timing-function: $transition-timing-function-base
) {
  transition: $transition-property $transition-duration
    $transition-timing-function;
}

// This animation is to remove hidden items from screen readers and
// keyboard navigation, while maintaining the slow "close" effect.
@mixin animate-show($speed: $transition-duration-base, $delay: 0ms) {
  animation: #{$speed} show;
  animation-fill-mode: forwards;
  animation-delay: $delay;

  @keyframes show {
    // Start visible at 0% to avoid an occasional "flash" when closing.
    0% {
      visibility: hidden;
      opacity: 0;
    }

    2% {
      visibility: visible;
    }

    100% {
      visibility: visible;
      opacity: 1;
    }
  }
}

@mixin animate-hidden(
  $speed: $transition-duration-base,
  $hide-position: 'false'
) {
  @if $hide-position == 'true' {
    animation: hidden, position-change;
  } @else {
    animation: hidden;
  }

  animation-duration: #{$speed};
  animation-fill-mode: forwards;

  @keyframes hidden {
    // Start visible at 0% to avoid an occasional "flash" when closing.
    0% {
      visibility: visible;
      opacity: 1;
    }

    99% {
      visibility: visible;
    }

    100% {
      visibility: hidden;
      opacity: 0;
    }
  }
}

@mixin animate-slide-up-fade-in(
  $speed: $transition-duration-base,
  $delay: 0ms
) {
  animation: slide-up $speed;
  animation-fill-mode: forwards;
  animation-delay: $delay;

  @keyframes slide-up {
    0% {
      transform: translateY(#{space(3)});
      opacity: 0;
    }

    20% {
      transform: translateY(#{space(3)});
      opacity: 0;
    }

    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }
}

@mixin animate-grow-fade($speed: $transition-duration-base, $delay: 300ms) {
  animation: grow-fade $speed;
  animation-fill-mode: forwards;
  animation-delay: $delay;

  @keyframes grow-fade {
    0% {
      opacity: 0;
      transform: scale(0.25);
    }

    100% {
      opacity: 1;
      transform: scale(1);
    }
  }
}

@mixin cookie-consent($speed: $transition-duration-base, $delay: 500ms) {
  animation: slide-in $speed;
  animation-fill-mode: forwards;
  animation-delay: $delay;

  @keyframes slide-in {
    0% {
      bottom: -5rem;
      opacity: 0;
    }

    50% {
      opacity: 1;
    }

    100% {
      bottom: 0;
      opacity: 1;
    }
  }
}

// Demo UI
.motion {
  padding: 0 1rem;
}

.motion__grid {
  @media (min-width: 920px) {
    display: flex;
    flex-wrap: wrap;
  }
}

.motion__grid-item {
  @media (min-width: 920px) {
    margin-bottom: 1rem;
    margin-right: 1rem;
    width: 49%;

    &:nth-child(2n) {
      margin-right: 0;
    }
  }
}

.demo-motion {
  background-color: clr(accent, light);
  border-radius: 2px;
  cursor: pointer;
  padding: 3rem;
  text-align: center;

  &::before {
    content: 'Duration: #{$transition-duration-base}';
    display: block;
  }

  &::after {
    content: 'Timing Function: #{$transition-timing-function-base}';
  }

  span {
    display: block;
    margin: 0.25rem;
  }
}

.demo-motion--fade {
  @include transition;

  &:hover {
    background-color: clr(accent, light);
    color: clr(neutral);
  }
}

.demo-motion--slide-up {
  @include transition(transform, 0.4s, ease-in);

  &::before {
    content: 'Duration: 0.4s';
    display: block;
  }

  &::after {
    content: 'Timing Function: ease-in';
  }

  &:hover {
    transform: translateY(-10px);
  }
}

.demo-motion--slide-down {
  @include transition(transform, 0.2s, linear);

  &::before {
    content: 'Duration: 0.2s';
    display: block;
  }

  &::after {
    content: 'Timing Function: linear';
  }

  &:hover {
    transform: translateY(10px);
  }
}

.demo-motion--expand {
  @include transition(transform, 0.3s, cubic-bezier(0.17, 0.67, 0.83, 0.67));

  &::before {
    content: 'Duration: 0.3s';
    display: block;
  }

  &::after {
    content: 'Timing Function: cubic-bezier(.17,.67,.83,.67)';
  }

  &:hover {
    transform: scale(1.03);
  }
}
